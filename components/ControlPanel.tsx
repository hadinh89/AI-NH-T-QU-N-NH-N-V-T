import React, { useState } from 'react';
import type { CharacterSlot, ContextSlot } from '../types';
import ImageSlot from './ImageSlot';
import { enhancePrompt, suggestPromptFromImage } from '../services/geminiService';

interface ControlPanelProps {
  characterSlots: CharacterSlot[];
  setCharacterSlots: React.Dispatch<React.SetStateAction<CharacterSlot[]>>;
  contextSlot: ContextSlot;
  setContextSlot: React.Dispatch<React.SetStateAction<ContextSlot>>;
  prompt: string;
  setPrompt: React.Dispatch<React.SetStateAction<string>>;
  onGenerate: () => void;
  isLoading: boolean;
}

const promptSuggestions = {
  "H√†nh ƒë·ªông": [
    "ƒëang ch·∫°y n∆∞·ªõc r√∫t", "nh·∫£y m√∫a uy·ªÉn chuy·ªÉn", "thi·ªÅn ƒë·ªãnh", "ƒë·ªçc s√°ch c≈©", 
    "v·∫Ω m·ªôt b·ª©c tranh", "chi·∫øn ƒë·∫•u", "kh√°m ph√° hang ƒë·ªông", "h√°t tr√™n s√¢n kh·∫•u",
    "c∆∞·ª°i r·ªìng", "l∆∞·ªõt s√≥ng", "pha ch·∫ø ƒë·ªôc d∆∞·ª£c", "s·ª≠a ch·ªØa robot",
    "ch∆°i guitar ƒëi·ªán", "nh·∫£y d√π", "l√°i phi thuy·ªÅn", "ƒëi·ªáp vi√™n ·∫©n n·∫•p"
  ],
  "Bi·ªÉu c·∫£m": [
    "m·ªâm c∆∞·ªùi r·∫°ng r·ª°", "v·∫ª m·∫∑t tr·∫ßm t∆∞", "√°nh m·∫Øt quy·∫øt t√¢m", "ng·∫°c nhi√™n t·ªôt ƒë·ªô",
    "kh√≥c trong m∆∞a", "nh√°y m·∫Øt tinh ngh·ªãch", "h√©t l√™n gi·∫≠n d·ªØ", "c∆∞·ªùi b√≠ ·∫©n",
    "v·∫ª m·∫∑t ki√™u ng·∫°o", "√°nh m·∫Øt t√≤ m√≤", "n·ªói bu·ªìn s√¢u th·∫≥m", "v·∫ª m·∫∑t tinh ranh",
    "b·ªëi r·ªëi", "ho√†i ni·ªám", "v·∫ª m·∫∑t h√†i h∆∞·ªõc khi xem phim", "√°nh m·∫Øt l√©m l·ªânh khi ngh·ªãch ng·ª£m",
    "n·ª• c∆∞·ªùi b√≠ ·∫©n", "v·∫ª m·∫∑t nghi√™m t√∫c khi gi·∫£i ƒë·ªë", "√°nh m·∫Øt tr√¨u m·∫øn nh√¨n xa xƒÉm"
  ],
  "Trang ph·ª•c": [
    "m·∫∑c √°o gi√°p hi·ªáp sƒ©", "m·∫∑c v√°y d·∫° h·ªôi", "b·ªô ƒë·ªì phi h√†nh gia", "√°o kho√°c da v√† qu·∫ßn jean",
    "kimono truy·ªÅn th·ªëng", "√°o cho√†ng ph√°p s∆∞", "trang ph·ª•c steampunk", "ƒë·ªì b∆°i",
    "ƒë·ªìng ph·ª•c h·ªçc sinh", "trang ph·ª•c ho√†ng gia", "ƒë·ªì c·ªßa m·ªôt nh√† th√°m hi·ªÉm",
    "trang ph·ª•c t∆∞∆°ng lai", "√°o hoodie v√† tai nghe", "trang ph·ª•c ninja b√≥ng ƒë√™m",
    "b·ªô vest c√¥ng s·ªü l·ªãch l√£m", "trang ph·ª•c c∆∞·ªõp bi·ªÉn caribe", "√°o d√†i Vi·ªát Nam c√°ch t√¢n",
    "b·ªô ƒë·ªì th·ªÉ thao nƒÉng ƒë·ªông", "v√°y boho-chic", "trang ph·ª•c cyberpunk v·ªõi ƒë√®n neon",
    "trang ph·ª•c h·∫≠u t·∫≠n th·∫ø"
  ],
  "Phong c√°ch": [
    "phong c√°ch anime", "tranh s∆°n d·∫ßu", "ngh·ªá thu·∫≠t cyberpunk", "·∫£nh ch·ª•p ch√¢n th·ª±c",
    "m√†u n∆∞·ªõc", "ngh·ªá thu·∫≠t pixel", "phong c√°ch gothic", "phim ho·∫°t h√¨nh Disney",
    "tranh th·ªßy m·∫∑c", "phong c√°ch retro th·∫≠p ni√™n 80", "ngh·ªá thu·∫≠t huy·ªÖn t∆∞·ªüng (fantasy)",
    "phong c√°ch low-poly", "phim noir", "vaporwave"
  ],
};

const ControlPanel: React.FC<ControlPanelProps> = ({
  characterSlots,
  setCharacterSlots,
  contextSlot,
  setContextSlot,
  prompt,
  setPrompt,
  onGenerate,
  isLoading,
}) => {
  const [isEnhancing, setIsEnhancing] = useState(false);
  const [isSuggesting, setIsSuggesting] = useState(false);
  const [showGuide, setShowGuide] = useState(true);

  const handleAppendPrompt = (text: string) => {
    setPrompt(prev => prev ? `${prev}, ${text}` : text);
  };

  const hasCharacterImage = characterSlots.some(s => s.selected && s.file);

  const handleSuggestPrompt = async () => {
    if (isSuggesting || !hasCharacterImage) return;
    setIsSuggesting(true);
    try {
        const selectedCharacters = characterSlots.filter(
          (slot) => slot.selected && slot.base64
        );
        const suggested = await suggestPromptFromImage(selectedCharacters);
        if (suggested) {
          setPrompt(suggested);
        }
    } catch (error) {
        console.error("Failed to suggest prompt", error);
    } finally {
        setIsSuggesting(false);
    }
  };
  
  const handleEnhancePrompt = async () => {
    if (!prompt || isEnhancing) return;
    setIsEnhancing(true);
    try {
        const selectedCharacters = characterSlots.filter(
          (slot) => slot.selected && slot.base64
        );
        const enhanced = await enhancePrompt(prompt, selectedCharacters);
        setPrompt(enhanced);
    } catch (error) {
        console.error("Failed to enhance prompt", error);
        // Optionally show an error to the user
    } finally {
        setIsEnhancing(false);
    }
  };

  const loadingSpinner = (
    <svg className="animate-spin h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  );

  return (
    <div className="bg-gray-800 rounded-lg p-6 space-y-6 shadow-lg">
      {showGuide && (
        <div className="bg-gray-700/50 border border-gray-600 rounded-lg p-4 mb-6 relative animate-fade-in">
          <button
            onClick={() => setShowGuide(false)}
            className="absolute top-2 right-2 text-gray-400 hover:text-white text-2xl leading-none"
            title="ƒê√≥ng h∆∞·ªõng d·∫´n"
            aria-label="ƒê√≥ng h∆∞·ªõng d·∫´n"
          >
            &times;
          </button>
          <h3 className="text-md font-semibold text-purple-300 mb-2 flex items-center gap-2">
            üí° H∆∞·ªõng D·∫´n Nhanh
          </h3>
          <ol className="list-decimal list-inside text-sm text-gray-300 space-y-1">
            <li><strong>T·∫£i ·∫£nh nh√¢n v·∫≠t:</strong> Ch·ªçn √≠t nh·∫•t m·ªôt ·∫£nh tham chi·∫øu r√µ m·∫∑t.</li>
            <li><strong>Vi·∫øt c√¢u l·ªánh:</strong> M√¥ t·∫£ h√†nh ƒë·ªông, trang ph·ª•c, v√† b·ªëi c·∫£nh m·ªõi.</li>
            <li><strong>(T√πy ch·ªçn) Th√™m chi ti·∫øt:</strong> D√πng c√°c n√∫t g·ª£i √Ω ho·∫∑c "TƒÉng c∆∞·ªùng" ƒë·ªÉ c√¢u l·ªánh th√™m sinh ƒë·ªông.</li>
            <li><strong>T·∫°o ·∫£nh:</strong> Nh·∫•n n√∫t "T·∫°o ·∫¢nh" v√† ch·ªù k·∫øt qu·∫£.</li>
          </ol>
        </div>
      )}

      <div>
        <h2 className="text-lg font-semibold mb-3 text-purple-300">Nh√¢n V·∫≠t Tham Chi·∫øu</h2>
        <div className="grid grid-cols-2 gap-4">
          {characterSlots.map((slot) => (
            <ImageSlot
              key={slot.id}
              label={slot.label}
              imageFile={slot.file}
              onImageChange={(file) => setCharacterSlots(prev => prev.map(s => s.id === slot.id ? { ...s, file } : s))}
              slotState={slot}
              setSlotState={(updater) => setCharacterSlots(prev => prev.map(s => s.id === slot.id ? updater(s) as CharacterSlot : s))}
              isCharacter={true}
              onSelect={() => setCharacterSlots(prev => prev.map(s => s.id === slot.id ? { ...s, selected: !s.selected } : s))}
            />
          ))}
        </div>
      </div>

      <div>
        <h2 className="text-lg font-semibold mb-3 text-purple-300">B·ªëi C·∫£nh Tham Chi·∫øu</h2>
        <ImageSlot
          label="N·ªÅn"
          imageFile={contextSlot.file}
          onImageChange={(file) => setContextSlot(prev => ({ ...prev, file }))}
          slotState={contextSlot}
          setSlotState={(updater) => setContextSlot(updater as React.SetStateAction<ContextSlot>)}
          isCharacter={false}
        />
        <div className="mt-3 flex items-center">
            <input 
                type="checkbox"
                id="useContext"
                checked={contextSlot.useContext}
                onChange={(e) => setContextSlot(prev => ({...prev, useContext: e.target.checked}))}
                className="h-4 w-4 rounded bg-gray-700 border-gray-600 text-purple-600 focus:ring-purple-500"
            />
            <label htmlFor="useContext" className="ml-2 text-sm text-gray-300">S·ª≠ d·ª•ng b·ªëi c·∫£nh n√†y</label>
        </div>
      </div>

      <div>
        <div className="flex justify-between items-center mb-3">
            <h2 className="text-lg font-semibold text-purple-300">C√¢u L·ªánh</h2>
            <div className="flex items-center gap-2">
                <button
                    onClick={handleSuggestPrompt}
                    disabled={isSuggesting || !hasCharacterImage}
                    className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold bg-green-600 text-white rounded-md hover:bg-green-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    {isSuggesting ? (
                        <>{loadingSpinner}<span>ƒêang g·ª£i √Ω...</span></>
                    ) : (
                        <>‚ú® G·ª£i √Ω m√¥ t·∫£</>
                    )}
                </button>
                <button
                    onClick={handleEnhancePrompt}
                    disabled={isEnhancing || !prompt}
                    className="flex items-center gap-2 px-3 py-1.5 text-xs font-semibold bg-indigo-600 text-white rounded-md hover:bg-indigo-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                >
                    {isEnhancing ? (
                       <>{loadingSpinner}<span>ƒêang tƒÉng c∆∞·ªùng...</span></>
                    ) : (
                        <>üöÄ TƒÉng c∆∞·ªùng</>
                    )}
                </button>
            </div>
        </div>
        <textarea
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="T·∫£i ·∫£nh tham chi·∫øu v√† nh·∫•p 'G·ª£i √Ω m√¥ t·∫£' ho·∫∑c t·ª± nh·∫≠p m√¥ t·∫£..."
          className="w-full h-32 p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition duration-200 resize-none"
        />
        <div className="mt-4">
            <h3 className="text-sm text-gray-400 mb-2">Th√™m chi ti·∫øt:</h3>
            <div className="grid grid-cols-2 gap-3">
                {Object.entries(promptSuggestions).map(([category, suggestions]) => (
                    <div key={category} className="relative">
                        <select
                            onChange={(e) => {
                                if (e.target.value) {
                                    handleAppendPrompt(e.target.value);
                                    e.target.value = ""; // Reset dropdown to placeholder
                                }
                            }}
                            className="w-full appearance-none bg-gray-700 border border-gray-600 text-white text-sm rounded-md py-2 px-3 focus:ring-purple-500 focus:border-purple-500 transition cursor-pointer"
                        >
                            <option value="" disabled className="text-gray-500">{category}</option>
                            {suggestions.map((suggestion) => (
                                <option key={suggestion} value={suggestion}>
                                    {suggestion}
                                </option>
                            ))}
                        </select>
                        <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                            <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
                        </div>
                    </div>
                ))}
            </div>
        </div>
      </div>
      
      <p className="text-xs text-yellow-400 bg-yellow-900/50 p-2 rounded-md">
        R√†ng bu·ªôc: AI s·∫Ω c·ªë g·∫Øng gi·ªØ l·∫°i to√†n b·ªô khu√¥n m·∫∑t t·ª´ ·∫£nh tham chi·∫øu.
      </p>

      <button
        onClick={onGenerate}
        disabled={isLoading}
        className="w-full py-3 px-4 bg-gradient-to-r from-purple-600 to-indigo-600 text-white font-bold rounded-lg hover:from-purple-700 hover:to-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105 shadow-lg flex items-center justify-center"
      >
        {isLoading ? (
          <>
            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            ƒêang t·∫°o...
          </>
        ) : (
          'T·∫°o ·∫¢nh'
        )}
      </button>
    </div>
  );
};

export default ControlPanel;